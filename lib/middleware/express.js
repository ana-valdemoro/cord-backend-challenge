import bodyParser from 'body-parser';
import rulesTemplateReader from './rulesTemplateReader';
import validateBodyParameters from './bodyValidator';
import validateQueryParameters from './queryValidator';

export default function (app) {
  app.set('port', process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstRules = (req, res, next) => {
  const { method, _parsedUrl: { pathname: route } } = req;

  const { parameters : queryAndBodyRules } = rulesTemplateReader({ method, route });

  //Checks if there are queryAndBodyRules for the current request or not
  if (queryAndBodyRules) {
    const [bodyRules, queryRules] = splitQueryAndBodyRules(queryAndBodyRules);

    if (bodyRules.length === 1) {
      let { passValidation, ...failedResponse } = validateBodyParameters(
        req.body,
        bodyRules[0].schema
      );
      if (!passValidation) {
        return res.status(failedResponse.status).json(failedResponse.message);
      }
    }

    if (Object.keys(req.query).length >= 1 && queryRules.length >= 1) {
      let { passQueryValidation, ...failedResponse } = validateQueryParameters(
        req.query,
        queryRules
      );

      if (!passQueryValidation) {
        return res.status(failedResponse.status).json(failedResponse.message);
      }
    }

  }
  return next();
};

const splitQueryAndBodyRules = (queryAndBodyRules) => {
  const bodyRules = queryAndBodyRules.filter( (rule) => rule.in === 'body');
  const queryRules = queryAndBodyRules.filter( (rule) => rule.in === 'query');
  const result = [bodyRules, queryRules];

  return result;
};
